
TZ=CET
export TZ

BASEDIR="${BASEDIR:-$(dirname $0)}"
BUILDDIR="${BUILDDIR:-${BASEDIR}}"
TOP_BUILDDIR="${TOP_BUILDDIR:-${BASEDIR}/..}"

#
# because valgrind has trouble with glib memory handling
# (see e.g. https://developer.gnome.org/glib/2.30/glib-running.html or 
# https://stackoverflow.com/questions/4254610/valgrind-reports-memory-possibly-lost-when-using-glib-data-types)
# we set some env. vars to work around them:

function rrdtool_valgrind {
  # use a sub shell, so setting environment variables only affects the current
  # rrdtool run and not subsequent ones
  (
    G_DEBUG=gc-friendly
    G_SLICE=all

    export G_DEBUG 
    export G_SLICE

    VALGRIND_OPTS=
    if [ -n "$VALGRIND_LOGFILE" ] ; then
        TMP_LOG="${VALGRIND_LOGFILE}.$$.tmp"
        VALGRIND_OPTS=--log-file="${TMP_LOG}"
    fi

    libtool --mode=execute valgrind --tool=memcheck \
			--suppressions="$BASEDIR/valgrind-supressions" \
			--leak-check=full --show-reachable=yes \
			--leak-resolution=high --num-callers=20 \
			--error-exitcode=111 \
			--track-fds=yes \
                        --track-origins=yes \
			--free-fill=ad \
                        $VALGRIND_OPTS \
			"$TOP_BUILDDIR/src/rrdtool" "$@"
    RC=$?

    if [ -n "$VALGRIND_LOGFILE" ] ; then
        cat -- "${TMP_LOG}" >> "$VALGRIND_LOGFILE"
        if [ $RC == 111 ] ; then
            sed -n '/LEAK SUMMARY:/,$p' -- "${TMP_LOG}" >&2
        fi
        rm -f -- "${TMP_LOG}"
    fi

    # make sure to properly report the rrdtool exit code to the caller by:
    #  - first: exiting with the original exit code from the subshell and
    exit $RC
  )
  #    - second: by returning the subshell exit code to the function caller
  return $?
}

if [ -z "$RRDTOOL" ] ; then 
	case "$TESTS_STYLE" in
	valgrind)
		echo >&2 "# Note: exit code 111 indicates a valgrind detected memory problem" 
		RRDTOOL=rrdtool_valgrind
                ;;
	valgrind-logfile)
		echo >&2 "# Note: exit code 111 indicates a valgrind detected memory problem" 
		RRDTOOL=rrdtool_valgrind
                VALGRIND_LOGFILE="${BASEDIR}/$(basename $0)"-valgrind.log
                rm -f "$VALGRIND_LOGFILE"
	;;
	*)
		RRDTOOL=$TOP_BUILDDIR/src/rrdtool
		;;
	esac
fi

function verbose_rrdtool {
	echo "$RRDTOOL_V" "$@"
	"$RRDTOOL_V" "$@"
}

if [ -n "$VERBOSE" ] ; then
	RRDTOOL_V="$RRDTOOL"
	RRDTOOL=verbose_rrdtool
fi


DIFF="diff -u"

function fail {
	RC=$?
	echo >&2 "FAILED: (rc=$RC)" "$@"
	if [ -n "$CONTINUE" ] ; then
		return
	fi
	if [ -n "$INTERACTIVE" ] ; then
		read -p "Continue? (y/n)" YN
		if [ "$YN" != 'y' ] ; then 
			exit $RC
		fi
	else
		exit $RC
	fi
}

function ok {
	echo >&2 "OK:" "$@"
}

function report {
	RC=$?
	if [ "$RC" = 0 ] ; then
		ok "$@"
	else
		fail "$@"
	fi
}
